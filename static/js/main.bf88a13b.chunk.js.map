{"version":3,"sources":["assets/flags/united-nations.svg","assets/flags/uk.svg","assets/flags/france.svg","assets/flags/germany.svg","assets/flags/italy.svg","assets/flags/belarus.svg","assets/flags/ukraine.svg","assets/flags/russia.svg","state/reducer.js","state/actions.js","state/store.js","state/api.js","state/thunks.js","state/actionCreators.js","components/SidebarButton/SidebarButton.jsx","components/Sidebar/Sidebar.jsx","components/Header/Header.jsx","components/FilterToggle/FilterToggle.jsx","components/CountryFilter/CountryFilter.jsx","state/selectors.js","components/CountryFilter/CountryFilterContainer.jsx","components/CountryListItem/CountryListItem.jsx","components/CountryList/CountryList.jsx","tools/numberConverter.js","tools/dateConverter.js","components/CountryList/CountryListContainer.jsx","components/CountryChart/CountryChart.jsx","components/CountryChart/CountryChartContainer.jsx","components/CountryPage/CountryPage.jsx","components/WorldFilter/WorldFilter.jsx","components/WorldFilter/WorldFilterContainer.jsx","components/WorldListItem/WorldListItem.jsx","components/WorldList/WorldList.jsx","components/WorldList/WorldListContainer.jsx","components/WorldPage/WorldPage.jsx","components/Main/Main.jsx","components/Loader/Loader.jsx","App.js","index.js"],"names":["module","exports","initialState","world","worldList","filterType","original","filtered","countryList","displayType","isInit","appReducer","state","action","type","summary","Global","Countries","countryObj","sort","a","b","TotalConfirmed","TotalRecovered","TotalDeaths","reverse","store","createStore","applyMiddleware","thunk","window","instance","Axios","create","baseURL","API","getSummary","get","then","response","data","error","getCountry","country","onSetCountry","dispatch","setCountry","SidebarButton","icon","className","src","alt","Sidebar","exact","to","activeClassName","uk","france","germany","italy","belarus","ukraine","russia","Header","numberConverter","NewConfirmed","NewRecovered","NewDeaths","withRouter","match","setListType","setChartType","params","onClick","CountryFilter","setDefaultFilter","setReverseFilter","disabled","getInitStatus","getWorld","getWorldFilterType","getWorldListFiltered","getCountryDisplayType","getCountryFilterType","getCountryListOriginal","getCountryListFiltered","connect","setCountryFilterDefault","setCountryFilterReverse","setDisplayTypeList","setDisplayTypeChart","CountryListItem","Day","Confirmed","Recovered","Deaths","dateConverter","CountryList","map","item","key","Date","value","Math","round","string","date","parse","Intl","DateTimeFormat","format","props","CountryChart","useEffect","Chart","chartRef","current","labels","datasets","label","borderColor","borderWidth","fill","options","responsive","elements","point","pointStyle","radius","legend","position","padding","scales","yAxes","ticks","beginAtZero","useRef","ref","path","render","WorldFilter","activeButton","setConfirmedFilter","setRecoveredFilter","setDeathFilter","placeholder","setWorldFilterDefault","setWorldFilterConfirmed","setWorldFilterRecovered","setWorldFilterDeath","WorldListItem","Country","WorldList","Slug","WorldPage","WorldFilterContainer","Main","worldIcon","Loader","onInitialization","initialization","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.bf88a13b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/united-nations.f1d483fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/uk.8b60db82.svg\";","module.exports = __webpack_public_path__ + \"static/media/france.a573a70c.svg\";","module.exports = __webpack_public_path__ + \"static/media/germany.42efef16.svg\";","module.exports = __webpack_public_path__ + \"static/media/italy.d21dc3b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/belarus.5057516e.svg\";","module.exports = __webpack_public_path__ + \"static/media/ukraine.24ffc5a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/russia.e0012980.svg\";","import {\r\n    INITIALIZATION, SET_COUNTRY,\r\n    WORLD_FILTER_DEFAULT, WORLD_FILTER_CONFIRMED, WORLD_FILTER_RECOVERED, WORLD_FILTER_DEATH,\r\n    COUNTRY_FILTER_DEFAULT, COUNTRY_FILTER_REVERSE,\r\n    SET_DISPLAY_TYPE_LIST, SET_DISPLAY_TYPE_CHART\r\n} from \"./actions\"\r\n\r\nconst initialState = {\r\n    world: null,\r\n    worldList: {\r\n        filterType: null,\r\n        original: null,\r\n        filtered: null\r\n    },\r\n    countryList: {\r\n        displayType: null,\r\n        filterType: null,\r\n        original: null,\r\n        filtered: null\r\n    },\r\n    isInit: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZATION:\r\n            return {\r\n                ...state,\r\n                world: { ...action.summary.Global },\r\n                worldList: {\r\n                    filterType: 'default',\r\n                    original: [...action.summary.Countries],\r\n                    filtered: [...action.summary.Countries]\r\n                },\r\n                isInit: true\r\n            }\r\n\r\n        case SET_COUNTRY:\r\n            return {\r\n                ...state,\r\n                countryList: {\r\n                    displayType: 'list',\r\n                    filterType: 'default',\r\n                    original: [...action.countryObj],\r\n                    filtered: [...action.countryObj]\r\n                },\r\n            }\r\n\r\n        case WORLD_FILTER_DEFAULT:\r\n            return {\r\n                ...state,\r\n                worldList: {\r\n                    ...state.worldList,\r\n                    filterType: 'default',\r\n                    filtered: [...state.worldList.original]\r\n                },\r\n            }\r\n\r\n        case WORLD_FILTER_CONFIRMED:\r\n            return {\r\n                ...state,\r\n                worldList: {\r\n                    ...state.worldList,\r\n                    filterType: 'confirmed',\r\n                    filtered: [...state.worldList.filtered.sort((a, b) => b.TotalConfirmed - a.TotalConfirmed)]\r\n                },\r\n            }\r\n\r\n        case WORLD_FILTER_RECOVERED:\r\n            return {\r\n                ...state,\r\n                worldList: {\r\n                    ...state.worldList,\r\n                    filterType: 'recovered',\r\n                    filtered: [...state.worldList.filtered.sort((a, b) => b.TotalRecovered - a.TotalRecovered)]\r\n                },\r\n            }\r\n\r\n        case WORLD_FILTER_DEATH:\r\n            return {\r\n                ...state,\r\n                worldList: {\r\n                    ...state.worldList,\r\n                    filterType: 'death',\r\n                    filtered: [...state.worldList.filtered.sort((a, b) => b.TotalDeaths - a.TotalDeaths)]\r\n                },\r\n            }\r\n\r\n        case COUNTRY_FILTER_DEFAULT:\r\n            return {\r\n                ...state,\r\n                countryList: {\r\n                    ...state.countryList,\r\n                    filterType: 'default',\r\n                    filtered: [...state.countryList.original]\r\n                },\r\n            }\r\n\r\n        case COUNTRY_FILTER_REVERSE:\r\n            return {\r\n                ...state,\r\n                countryList: {\r\n                    ...state.countryList,\r\n                    filterType: 'reverse',\r\n                    filtered: [...state.countryList.filtered.reverse()]\r\n                },\r\n            }\r\n\r\n        case SET_DISPLAY_TYPE_LIST:\r\n            return {\r\n                ...state,\r\n                countryList: {\r\n                    ...state.countryList,\r\n                    displayType: 'list'\r\n                },\r\n            }\r\n\r\n        case SET_DISPLAY_TYPE_CHART:\r\n            return {\r\n                ...state,\r\n                countryList: {\r\n                    ...state.countryList,\r\n                    displayType: 'chart'\r\n                },\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default appReducer","export const INITIALIZATION = 'INITIALIZATION'\r\nexport const SET_COUNTRY = 'SET_COUNTRY'\r\nexport const WORLD_FILTER_DEFAULT = 'WORLD_FILTER_DEFAULT'\r\nexport const WORLD_FILTER_CONFIRMED = 'WORLD_FILTER_CONFIRMED'\r\nexport const WORLD_FILTER_RECOVERED = 'WORLD_FILTER_RECOVERED'\r\nexport const WORLD_FILTER_DEATH = 'WORLD_FILTER_DEATH'\r\nexport const COUNTRY_FILTER_DEFAULT = 'COUNTRY_FILTER_DEFAULT'\r\nexport const COUNTRY_FILTER_REVERSE = 'COUNTRY_FILTER_REVERSE'\r\nexport const SET_DISPLAY_TYPE_LIST = 'SET_DISPLAY_TYPE_LIST'\r\nexport const SET_DISPLAY_TYPE_CHART = 'SET_DISPLAY_TYPE_CHART'","import { createStore, applyMiddleware } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport appReducer from \"./reducer\"\r\n\r\nlet store = createStore(appReducer, applyMiddleware(thunk))\r\nwindow.store = store\r\n\r\nexport default store","import Axios from \"axios\"\r\n\r\nconst instance = Axios.create({ baseURL: 'https://api.covid19api.com/' })\r\n\r\nconst API = {\r\n    getSummary() {\r\n        return instance.get('summary').then(response => response.data, error => API.getSummary())\r\n    },\r\n    getCountry(country) {\r\n        return instance.get(`total/dayone/country/${country}`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport default API","import API from \"./api\";\r\nimport { initialization, setCountry } from \"./actionCreators\";\r\n\r\nexport const onInitialization = () => (dispatch) => {\r\n    API.getSummary().then(summary => dispatch(initialization(summary)))\r\n}\r\n\r\nexport const onSetCountry = (country) => (dispatch) => {\r\n    API.getCountry(country).then(countryObj => dispatch(setCountry(countryObj)))\r\n}","import {\r\n    INITIALIZATION, SET_COUNTRY,\r\n    WORLD_FILTER_DEFAULT, WORLD_FILTER_CONFIRMED, WORLD_FILTER_RECOVERED, WORLD_FILTER_DEATH,\r\n    COUNTRY_FILTER_DEFAULT, COUNTRY_FILTER_REVERSE,\r\n    SET_DISPLAY_TYPE_LIST, SET_DISPLAY_TYPE_CHART\r\n} from \"./actions\"\r\n\r\nexport const initialization = (summary) => ({ type: INITIALIZATION, summary })\r\nexport const setCountry = (countryObj) => ({ type: SET_COUNTRY, countryObj })\r\nexport const setWorldFilterDefault = () => ({ type: WORLD_FILTER_DEFAULT })\r\nexport const setWorldFilterConfirmed = () => ({ type: WORLD_FILTER_CONFIRMED })\r\nexport const setWorldFilterRecovered = () => ({ type: WORLD_FILTER_RECOVERED })\r\nexport const setWorldFilterDeath = () => ({ type: WORLD_FILTER_DEATH })\r\nexport const setCountryFilterDefault = () => ({ type: COUNTRY_FILTER_DEFAULT })\r\nexport const setCountryFilterReverse = () => ({ type: COUNTRY_FILTER_REVERSE })\r\nexport const setDisplayTypeList = () => ({ type: SET_DISPLAY_TYPE_LIST })\r\nexport const setDisplayTypeChart = () => ({ type: SET_DISPLAY_TYPE_CHART })","import React from 'react'\r\nimport './SidebarButton.scss'\r\n\r\nconst SidebarButton = ({ icon, country }) => {\r\n    return (\r\n        <div className='sidebar__button'>\r\n            <span><img src={icon} alt='flag' /></span>\r\n            <span>{country}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarButton","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport SidebarButton from '../SidebarButton/SidebarButton'\r\nimport world from '../../assets/flags/united-nations.svg'\r\nimport uk from '../../assets/flags/uk.svg'\r\nimport france from '../../assets/flags/france.svg'\r\nimport germany from '../../assets/flags/germany.svg'\r\nimport italy from '../../assets/flags/italy.svg'\r\nimport belarus from '../../assets/flags/belarus.svg'\r\nimport ukraine from '../../assets/flags/ukraine.svg'\r\nimport russia from '../../assets/flags/russia.svg'\r\nimport './Sidebar.scss'\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <aside className='covid-app__section covid-app__sidebar'>\r\n            <NavLink exact to='/' activeClassName=\"selected\"><SidebarButton icon={world} country='World' /></NavLink>\r\n            <NavLink to='/united-kingdom' activeClassName=\"selected\"><SidebarButton icon={uk} country='United Kingdom' /></NavLink>\r\n            <NavLink to='/france' activeClassName=\"selected\"><SidebarButton icon={france} country='France' /></NavLink>\r\n            <NavLink to='/germany' activeClassName=\"selected\"><SidebarButton icon={germany} country='Germany' /></NavLink>\r\n            <NavLink to='/italy' activeClassName=\"selected\"><SidebarButton icon={italy} country='Italy' /></NavLink>\r\n            <NavLink to='/belarus' activeClassName=\"selected\"><SidebarButton icon={belarus} country='Belarus' /></NavLink>\r\n            <NavLink to='/ukraine' activeClassName=\"selected\"><SidebarButton icon={ukraine} country='Ukraine' /></NavLink>\r\n            <NavLink to='/russia' activeClassName=\"selected\"><SidebarButton icon={russia} country='Russia' /></NavLink>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\nimport './Header.scss'\r\n\r\nconst Header = ({ icon, world, numberConverter }) => {\r\n    return (\r\n        <header className='covid-app__section covid-app__header'>\r\n            <img src={icon} alt='flag' />\r\n            <span>Confirmed: {numberConverter(world.TotalConfirmed)} (+{numberConverter(world.NewConfirmed)})</span>\r\n            <span>Recovered: {numberConverter(world.TotalRecovered)} (+{numberConverter(world.NewRecovered)})</span>\r\n            <span>Deaths: {numberConverter(world.TotalDeaths)} (+{numberConverter(world.NewDeaths)})</span>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { NavLink, withRouter } from 'react-router-dom'\r\nimport './FilterToggle.scss'\r\n\r\nconst FilterToggle = ({ match, displayType, setListType, setChartType }) => {\r\n    return (\r\n        <span className='filter__toggle'>\r\n            <NavLink to={`/${match.params.country}`}>\r\n                <button\r\n                    className={`covid-app__button ${displayType === 'list' ? 'covid-app__button_selected' : null}`}\r\n                    onClick={setListType}\r\n                >\r\n                    List\r\n                </button>\r\n            </NavLink>\r\n            <NavLink to={`/${match.params.country}/chart`}>\r\n                <button\r\n                    className={`covid-app__button ${displayType === 'chart' ? 'covid-app__button_selected' : null}`}\r\n                    onClick={setChartType}\r\n                >\r\n                    Chart\r\n                </button>\r\n            </NavLink>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default withRouter(FilterToggle)","import React from 'react'\r\nimport FilterToggle from '../FilterToggle/FilterToggle'\r\n\r\nconst CountryFilter = ({ displayType, filterType, setDefaultFilter, setReverseFilter, setListType, setChartType }) => {\r\n    return (\r\n        <section className='covid-app__section covid-app__filter'>\r\n            <span>\r\n                <span>Sorted by:</span>\r\n                <button\r\n                    className={`covid-app__button ${filterType === 'default' ? 'covid-app__button_selected' : null}`}\r\n                    disabled={displayType === 'chart'}\r\n                    onClick={setDefaultFilter}\r\n                >Default</button>\r\n                <button\r\n                    className={`covid-app__button ${filterType === 'reverse' ? 'covid-app__button_selected' : null}`}\r\n                    disabled={displayType === 'chart'}\r\n                    onClick={setReverseFilter}\r\n                >Reverse</button>\r\n            </span>\r\n            <FilterToggle displayType={displayType} setListType={setListType} setChartType={setChartType} />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CountryFilter","export const getInitStatus = (state) => {\r\n    return state.isInit\r\n}\r\n\r\nexport const getWorld = (state) => {\r\n    return state.world\r\n}\r\n\r\nexport const getWorldFilterType = (state) => {\r\n    return state.worldList.filterType\r\n}\r\n\r\nexport const getWorldListOriginal = (state) => {\r\n    return state.worldList.original\r\n}\r\n\r\nexport const getWorldListFiltered = (state) => {\r\n    return state.worldList.filtered\r\n}\r\n\r\nexport const getCountryDisplayType = (state) => {\r\n    return state.countryList.displayType\r\n}\r\n\r\nexport const getCountryFilterType = (state) => {\r\n    return state.countryList.filterType\r\n}\r\n\r\nexport const getCountryListOriginal = (state) => {\r\n    return state.countryList.original\r\n}\r\n\r\nexport const getCountryListFiltered = (state) => {\r\n    return state.countryList.filtered\r\n}","import React from 'react'\r\nimport CountryFilter from './CountryFilter'\r\nimport { connect } from 'react-redux'\r\nimport { setCountryFilterDefault, setCountryFilterReverse, setDisplayTypeList, setDisplayTypeChart } from '../../state/actionCreators'\r\nimport { getCountryFilterType, getCountryDisplayType } from '../../state/selectors'\r\n\r\nconst CountryFilterContainer = ({ displayType, filterType, setCountryFilterDefault, setCountryFilterReverse, setDisplayTypeList, setDisplayTypeChart }) => {\r\n    return (\r\n        <CountryFilter\r\n            displayType={displayType}\r\n            filterType={filterType}\r\n            setDefaultFilter={setCountryFilterDefault}\r\n            setReverseFilter={setCountryFilterReverse}\r\n            setListType={setDisplayTypeList}\r\n            setChartType={setDisplayTypeChart}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    displayType: getCountryDisplayType(state),\r\n    filterType: getCountryFilterType(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    setCountryFilterDefault,\r\n    setCountryFilterReverse,\r\n    setDisplayTypeList,\r\n    setDisplayTypeChart\r\n})(CountryFilterContainer)","import React from 'react'\r\n\r\nconst CountryListItem = ({ Day, Confirmed, Recovered, Deaths, numberConverter, dateConverter }) => {\r\n    return (\r\n        <section className='covid-app__list-item'>\r\n            <span>{dateConverter(Day)}</span>\r\n            <span>Confirmed: {numberConverter(Confirmed)}</span>\r\n            <span>Recovered: {numberConverter(Recovered)}</span>\r\n            <span>Deaths: {numberConverter(Deaths)}</span>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CountryListItem","import React from 'react'\r\nimport CountryListItem from '../CountryListItem/CountryListItem'\r\n\r\nconst CountryList = ({ countryList, numberConverter, dateConverter }) => {\r\n\r\n    return (\r\n        <section className='covid-app__section covid-app__section_list'>\r\n            {\r\n                countryList ? (countryList.map(item => (\r\n                    <CountryListItem\r\n                        key={item.Date}\r\n                        Day={item.Date}\r\n                        Confirmed={item.Confirmed}\r\n                        Recovered={item.Recovered}\r\n                        Deaths={item.Deaths}\r\n                        numberConverter={numberConverter}\r\n                        dateConverter={dateConverter}\r\n                    />)\r\n                )) : 'Loading...'\r\n            }\r\n        </section>\r\n\r\n    )\r\n}\r\n\r\nexport default CountryList ","export const numberConverter = (value) => {\r\n    if (value > 1000000) {\r\n        return `${(Math.round(value / 1000)) / 1000}M`\r\n    }\r\n    else if (value > 10000) {\r\n        return `${(Math.round(value / 100)) / 10}K`\r\n    }\r\n    else if (value > 1000) {\r\n        return `${(Math.round(value / 10)) / 100}K`\r\n    }\r\n    else if (value < 1000) {\r\n        return value\r\n    }\r\n}","export const dateConverter = (string) => {\r\n    const date = new Date(Date.parse(string))\r\n    const formatter = new Intl.DateTimeFormat()\r\n    return formatter.format(date)\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CountryList from './CountryList'\r\nimport { getCountryListFiltered } from '../../state/selectors'\r\nimport { numberConverter } from '../../tools/numberConverter'\r\nimport { dateConverter } from '../../tools/dateConverter'\r\n\r\nconst CountryListContainer = (props) => {\r\n    return (\r\n        <CountryList {...props} numberConverter={numberConverter} dateConverter={dateConverter} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countryList: getCountryListFiltered(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(CountryListContainer)","import React, { useEffect, useRef } from 'react'\r\nimport Chart from 'chart.js'\r\nimport './CountryChart.scss'\r\n\r\nconst CountryChart = ({ countryList, dateConverter }) => {\r\n\r\n    useEffect(() => {\r\n        new Chart(chartRef.current, {\r\n            type: 'line',\r\n            data: {\r\n                labels: countryList.map(item => dateConverter(item.Date)),\r\n                datasets: [{\r\n                    label: 'Confirmed',\r\n                    data: countryList.map(item => item.Confirmed),\r\n                    borderColor: '#4D1ED3',\r\n                    borderWidth: 3,\r\n                    fill: false\r\n                }, {\r\n                    label: 'Recovered',\r\n                    data: countryList.map(item => item.Recovered),\r\n                    borderColor: '#72EBBA',\r\n                    borderWidth: 3,\r\n                    fill: false\r\n                }, {\r\n                    label: 'Deaths',\r\n                    data: countryList.map(item => item.Deaths),\r\n                    borderColor: '#FC1946',\r\n                    borderWidth: 3,\r\n                    fill: false\r\n                }]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                elements: {\r\n                    point: {\r\n                        pointStyle: 'circle',\r\n                        radius: 0\r\n                    }\r\n                },\r\n                legend: {\r\n                    position: \"bottom\",\r\n                    labels: {\r\n                        padding: 40,\r\n                    }\r\n                },\r\n                scales: {\r\n                    yAxes: [{\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        })\r\n    }, [countryList])\r\n\r\n    const chartRef = useRef(null)\r\n\r\n    return (\r\n        <section className='covid-app__section covid-app__chart'>\r\n            <canvas ref={chartRef}></canvas>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CountryChart","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCountryListOriginal } from '../../state/selectors'\r\nimport { numberConverter } from '../../tools/numberConverter'\r\nimport { dateConverter } from '../../tools/dateConverter'\r\nimport CountryChart from './CountryChart'\r\n\r\nconst CountryChartContainer = (props) => {\r\n    return (\r\n        <CountryChart {...props} numberConverter={numberConverter} dateConverter={dateConverter} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    countryList: getCountryListOriginal(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(CountryChartContainer)","import React, { useEffect } from 'react'\r\nimport { Route, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport CountryFilterContainer from '../CountryFilter/CountryFilterContainer'\r\nimport CountryListContainer from '../CountryList/CountryListContainer'\r\nimport CountryChartContainer from '../CountryChart/CountryChartContainer'\r\nimport { onSetCountry } from '../../state/thunks'\r\n\r\nconst CountryPage = ({ match, onSetCountry }) => {\r\n\r\n    useEffect(() => {\r\n        onSetCountry(match.params.country)\r\n    }, [match.params.country])\r\n\r\n    return (\r\n        <>\r\n            <CountryFilterContainer />\r\n            <Route exact path='/:country/' render={() => <CountryListContainer />} />\r\n            <Route path='/:country/chart' render={() => <CountryChartContainer />} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(connect(null, { onSetCountry })(CountryPage))","import React from 'react'\r\n\r\nconst WorldFilter = ({ activeButton, setDefaultFilter, setConfirmedFilter, setRecoveredFilter, setDeathFilter }) => {\r\n    return (\r\n        <section className='covid-app__section covid-app__filter'>\r\n            <span>\r\n                <span>Sorted by:</span>\r\n                <button\r\n                    className={`covid-app__button ${activeButton === 'default' ? 'covid-app__button_selected' : null}`}\r\n                    onClick={setDefaultFilter}>Default</button>\r\n                <button\r\n                    className={`covid-app__button ${activeButton === 'confirmed' ? 'covid-app__button_selected' : null}`}\r\n                    onClick={setConfirmedFilter}>Confirmed</button>\r\n                <button\r\n                    className={`covid-app__button ${activeButton === 'recovered' ? 'covid-app__button_selected' : null}`}\r\n                    onClick={setRecoveredFilter}>Recovered</button>\r\n                <button\r\n                    className={`covid-app__button ${activeButton === 'death' ? 'covid-app__button_selected' : null}`}\r\n                    onClick={setDeathFilter}>Deaths</button>\r\n            </span>\r\n            <span>\r\n                <input placeholder='Search country...' />\r\n            </span>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default WorldFilter","import React from 'react'\r\nimport WorldFilter from './WorldFilter'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    setWorldFilterDefault, setWorldFilterConfirmed,\r\n    setWorldFilterRecovered, setWorldFilterDeath\r\n} from '../../state/actionCreators'\r\nimport { getWorldFilterType } from '../../state/selectors'\r\n\r\nconst CountryFilterContainer = ({ filterType, setWorldFilterDefault, setWorldFilterConfirmed, setWorldFilterRecovered, setWorldFilterDeath }) => {\r\n\r\n\r\n    return (\r\n        <WorldFilter\r\n            activeButton={filterType}\r\n            setDefaultFilter={setWorldFilterDefault}\r\n            setConfirmedFilter={setWorldFilterConfirmed}\r\n            setRecoveredFilter={setWorldFilterRecovered}\r\n            setDeathFilter={setWorldFilterDeath}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    filterType: getWorldFilterType(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    setWorldFilterDefault,\r\n    setWorldFilterConfirmed,\r\n    setWorldFilterRecovered,\r\n    setWorldFilterDeath\r\n})(CountryFilterContainer)","import React from 'react'\r\n\r\nconst WorldListItem = ({ Country, TotalConfirmed, NewConfirmed, TotalDeaths, NewDeaths, TotalRecovered, NewRecovered, numberConverter }) => {\r\n    return (\r\n        <section className='covid-app__list-item'>\r\n            <span>{Country}</span>\r\n            <span>Confirmed: {numberConverter(TotalConfirmed)} (+{numberConverter(NewConfirmed)})</span>\r\n            <span>Recovered: {numberConverter(TotalRecovered)} (+{numberConverter(NewRecovered)})</span>\r\n            <span>Deaths: {numberConverter(TotalDeaths)} (+{numberConverter(NewDeaths)})</span>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default WorldListItem","import React from 'react'\r\nimport WorldListItem from '../WorldListItem/WorldListItem'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst WorldList = ({ worldList, numberConverter }) => {\r\n    return (\r\n        <section className='covid-app__section covid-app__section_list'>\r\n            {\r\n                worldList.map(item => (\r\n                    <NavLink to={`/${item.Slug}`} key={item.Country}>\r\n                        <WorldListItem\r\n                            Country={item.Country}\r\n                            TotalConfirmed={item.TotalConfirmed}\r\n                            NewConfirmed={item.NewConfirmed}\r\n                            TotalDeaths={item.TotalDeaths}\r\n                            NewDeaths={item.NewDeaths}\r\n                            TotalRecovered={item.TotalRecovered}\r\n                            NewRecovered={item.NewRecovered}\r\n                            numberConverter={numberConverter}\r\n                        />\r\n                    </NavLink>)\r\n                )\r\n            }\r\n        </section>\r\n\r\n    )\r\n}\r\n\r\nexport default WorldList","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport WorldList from './WorldList'\r\nimport { getWorldListFiltered } from '../../state/selectors'\r\nimport { numberConverter } from '../../tools/numberConverter'\r\n\r\nconst WorldListContainer = (props) => {\r\n    return (\r\n        <WorldList {...props} numberConverter={numberConverter} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    worldList: getWorldListFiltered(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(WorldListContainer)","import React from 'react'\r\nimport WorldFilterContainer from '../WorldFilter/WorldFilterContainer'\r\nimport WorldListContainer from '../WorldList/WorldListContainer'\r\n\r\nconst WorldPage = () => {\r\n    return (\r\n        <>\r\n            <WorldFilterContainer />\r\n            <WorldListContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WorldPage","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport Header from '../Header/Header'\r\nimport CountryPage from '../CountryPage/CountryPage'\r\nimport WorldPage from '../WorldPage/WorldPage'\r\nimport worldIcon from '../../assets/flags/united-nations.svg'\r\nimport './Main.scss'\r\n\r\n\r\nconst Main = ({ world, numberConverter }) => {\r\n    return (\r\n        <main className='covid-app__main'>\r\n            <Header\r\n                icon={worldIcon}\r\n                world={world}\r\n                numberConverter={numberConverter}\r\n            />\r\n            <Route exact path='/' render={() => <WorldPage />} />\r\n            <Route path='/:country' render={() => <CountryPage />} />\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main","import React from 'react'\r\nimport './Loader.scss'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"covid-app__loader\"><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { onInitialization, onSetCountry } from './state/thunks'\nimport Sidebar from './components/Sidebar/Sidebar'\nimport Main from './components/Main/Main'\nimport { getInitStatus, getWorld } from './state/selectors'\nimport { numberConverter } from './tools/numberConverter'\nimport Loader from './components/Loader/Loader'\n\nfunction App({ isInit, onInitialization, ...props }) {\n\n  useEffect(() => {\n    onInitialization()\n  }, [])\n\n  if (!isInit) return <Loader />\n\n  return (\n    <div className='covid-app'>\n      <Sidebar />\n      <Main {...props} numberConverter={numberConverter} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  isInit: getInitStatus(state),\n  world: getWorld(state)\n})\n\nexport default connect(mapStateToProps, { onInitialization, onSetCountry })(App)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport store from './state/store'\nimport App from './App'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <Router basename=\"/covid-app/\">\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}